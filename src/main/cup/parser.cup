package lyc.compiler;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import lyc.compiler.table.*;
import java.util.HashMap;
import lyc.compiler.tree.*;
import lyc.compiler.files.*;
import java.util.Stack;

class Parser;

action code {:
  ASTManager astManager;
  IntermediateCodeGenerator intermediateCodeGenerator;
  GestorNodos gestorNodos;
    HashMap<String, SymbolEntry> symbolTable = SymbolTableManager.symbolTable;
    List<String> idList = new ArrayList<>();
      Stack<Integer> conditionStack = new Stack<>();
      Stack<Integer> trueStack = new Stack<>();
      Stack<Integer> falseStack = new Stack<>();
      Stack<Integer> auxExpressionStack = new Stack<>();
      Stack<Integer> auxTermStack = new Stack<>();
    DataType dataType;

          int expressionIdx;
          int termIdx;
          int factorIdx;
          int programIdx;
          int blockIdx;
          int sentenceIdx;
          int vardeclarationIdx;
          int varsentenceIdx;
          int datatypeIdx;
          int idlistIdx;
          int decisionIdx;
          int conditionIdx;
          int comparisonIdx;
          int comparatorIdx;
          int iterationIdx;
          int assigIdx;
          int s_writeIdx;
          int s_readIdx;
          int write_paramIdx;
          int read_paramIdx;
          int c_listIdx;
          int listIdx;
          int cuerpoIdx;
          int cizquierdoIdx;
          int auxcmpIdx;
          String comparator;

                int c;
                int sum;
                int mult;
                int auxnc;
                int auxncIdx;
                int ifIdx;
                int auxcondIdx;
                int auxnc2Idx;
                int auxnc3Idx;
:}



// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal REST;
terminal MAYOR;
terminal LOWER;
terminal MAYOR_I;
terminal LOWER_I;
terminal EQUAL;
terminal NOT_EQUAL;
terminal AND_COND;
terminal OR_COND;
terminal NOT_COND;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal COMMA;
terminal SEMI_COLON;
terminal DOT;
terminal DOUBLE_DOT;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal BOOLEAN_CONSTANT;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal WRITE;
terminal READ;
terminal String IDENTIFIER;
terminal INIT;
terminal REORDER;
terminal SLICE_AND_CONCAT;


// Non Terminals
non terminal program;
non terminal block;
non terminal sentence;
non terminal var_declaration;
non terminal var_sencente_dec;
non terminal data_type;
non terminal id_list;
non terminal decision;
non terminal condition;
non terminal comparison;
non terminal comparator;
non terminal iterator;
non terminal assignment;
non terminal s_write;
non terminal s_read;
non terminal write_param;
non terminal read_param;
non terminal expression;
non terminal term;
non terminal factor;
non terminal reorder;
non terminal slice_and_concat;
non terminal c_list;
non terminal list;


// Start Symbol Definition
start with program;

program ::= block:b {:   System.out.println("Compilation Ok");
                         ASTManager.setRoot(blockIdx);
                         //Imprimir arbol por consola
                         GestorNodos.imprimirArbol(blockIdx);
                         //Generar .dot para ver visualmente el arbol en pdf
                         IntermediateCodeGenerator.generarDot("salida.dot",GestorNodos.obtenerNodo(blockIdx)); :};

/*-----------------------------------------
   BLOCK
-----------------------------------------*/
block ::= sentence:s {:
                       blockIdx = sentenceIdx;
                     :}
        | block:bk sentence:s {:
            System.out.println("Nueva sentencia en block");
            blockIdx = GestorNodos.crearNodo(";", blockIdx, sentenceIdx);
        :};

/*-----------------------------------------
   SENTENCE
-----------------------------------------*/
sentence ::=
       INIT {: System.out.println("Variable declaration starts"); :} OPEN_CURLY_BRACKET var_declaration CLOSE_CURLY_BRACKET
           {:
             System.out.println("Variable declaration ends");
             sentenceIdx = vardeclarationIdx;
           :}
           | decision:d
           {:
             sentenceIdx = decisionIdx;
           :}
           | iterator:i
           {:
             sentenceIdx = iterationIdx;
           :}
           | assignment:a
           {:
             System.out.println("Asignación detectada");
             sentenceIdx = assigIdx;
           :}
           | s_write:sw
           {:
             sentenceIdx = s_writeIdx;
           :}
           | s_read:sr
           {:
             sentenceIdx = s_readIdx;
           :}
       | reorder:r
       | slice_and_concat:sac;


/*-----------------------------------------
   VAR DECLARATION
-----------------------------------------*/
var_declaration ::= var_sencente_dec var_declaration
         {:
             vardeclarationIdx = GestorNodos.crearNodo(";", vardeclarationIdx, varsentenceIdx);

         :};
var_declaration ::= var_sencente_dec
        {:
            vardeclarationIdx = varsentenceIdx;
        :};
var_sencente_dec ::= id_list DOUBLE_DOT data_type   {:
                                                      for (String id : idList) {
                                                        SymbolTableManager.setDataTypeInTable(id, dataType);
                                                      }
                                                      idList.clear();
                                                      varsentenceIdx = GestorNodos.crearNodo(":",idlistIdx, GestorNodos.crearNodo(dataType.getName()));

                                                    :};
data_type ::=
              INT {:
                System.out.println("Int data type");
                dataType = DataType.INTEGER_TYPE;
            :}
            | FLOAT {:
                System.out.println("Float data type");
                dataType = DataType.FLOAT_TYPE;
            :}
            | STRING {:
                System.out.println("String data type");
                dataType = DataType.STRING_TYPE;
            :};

id_list ::= id_list COMMA IDENTIFIER:id {:
    System.out.println("ID declared: " + id);
    idList.add(id);
:} ;
id_list ::= IDENTIFIER:id {:
    System.out.println("ID declared: " + id);
    idList.add(id);
    idlistIdx = GestorNodos.crearNodo(",",idlistIdx,GestorNodos.crearNodo(id));
 :};


/*-----------------------------------------
   IF / ELSE
-----------------------------------------*/
decision ::= IF OPEN_BRACKET condition:c {: conditionStack.push(conditionIdx); :} CLOSE_BRACKET OPEN_CURLY_BRACKET block:bk CLOSE_CURLY_BRACKET   {:
                                                                                                                                                    System.out.println("If statement");
                                                                                                                                                    int x = conditionStack.pop();
                                                                                                                                                    decisionIdx = GestorNodos.crearNodo("if", x, blockIdx);
                                                                                                                                                  :};
/*
decision ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET ELSE OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {: System.out.println("If else statement"); :};*/

/*-----------------------------------------
   CONDITION
-----------------------------------------*/
condition ::= comparison:c1 {: auxcmpIdx = comparisonIdx; :} AND_COND comparison:c2
  {:
    System.out.println("And condition");
    conditionIdx = GestorNodos.crearNodo("AND", auxcmpIdx, comparisonIdx);
  :};
condition ::= comparison:c1 {: auxcmpIdx = comparisonIdx; :} OR_COND comparison:c2
  {:
    System.out.println("Or condition");
    conditionIdx = GestorNodos.crearNodo("OR", auxcmpIdx, comparisonIdx);

  :};
condition ::= comparison:c
  {:
    conditionIdx = comparisonIdx;
  :};
condition ::= NOT_COND comparison:c
  {:
    conditionIdx = GestorNodos.crearNodo("NOT", comparisonIdx);
  :};


/*-----------------------------------------
   COMPARISON
-----------------------------------------*/
comparison ::= expression:e1 {: cizquierdoIdx = expressionIdx; :} comparator:op expression:e2
  {:
    System.out.println("Comparison detectada con op: " + op);
    comparisonIdx = GestorNodos.crearNodo(comparator, cizquierdoIdx, expressionIdx);
  :};


comparison ::= OPEN_BRACKET condition CLOSE_BRACKET {: System.out.println("Comparison"); :};
comparator ::= MAYOR {: RESULT = ">"; :}
             | LOWER {: RESULT = "<"; :}
             | MAYOR_I {: RESULT = ">="; :}
             | LOWER_I {: RESULT = "<="; :}
             | EQUAL {: RESULT = "=="; :}
             | NOT_EQUAL {: RESULT = "!="; :}
             ;

/*-----------------------------------------
   WHILE
-----------------------------------------*/
iterator ::= WHILE OPEN_BRACKET condition:c {: conditionStack.push(conditionIdx); :} CLOSE_BRACKET OPEN_CURLY_BRACKET block:b CLOSE_CURLY_BRACKET
  {:
    System.out.println("While statement");
    int x = conditionStack.pop();
    iterationIdx = GestorNodos.crearNodo("while", x, blockIdx);
  :};

/*-----------------------------------------
   ASSIGNMENT
-----------------------------------------*/
assignment ::= IDENTIFIER:id ASSIG expression:e
  {:
    System.out.println("Asignación: " + id + " := (nodo " + e + ")");
    assigIdx = GestorNodos.crearNodo("=", GestorNodos.crearNodo(id), expressionIdx);
  :}
  | IDENTIFIER:id ASSIG STRING_CONSTANT:stre
  {:
    // Asignar un string,
    // ej "=", nodo(id), nodo(str)
    assigIdx = GestorNodos.crearNodo("=", GestorNodos.crearNodo(id), GestorNodos.crearNodo((String) stre));
  :};

//expression ::= expression PLUS term {: System.out.println("+"); :};
//expression ::= expression SUB term {: System.out.println("-"); :};
//expression ::= term {: System.out.println("Expression = Term"); :};


/*-----------------------------------------
   EXPRESSION
-----------------------------------------*/
expression ::= expression:e {: auxExpressionStack.push(expressionIdx); :} PLUS term:t
  {:
    System.out.println("Suma detectada: e=" + e + ", t=" + t);
    int x = auxExpressionStack.pop();
    expressionIdx = GestorNodos.crearNodo("+", x, termIdx);
  :}
  | expression:e {: auxExpressionStack.push(expressionIdx); :} SUB term:t
  {:
    System.out.println("Resta detectada: e=" + e + ", t=" + t);
     int x = auxExpressionStack.pop();
    expressionIdx = GestorNodos.crearNodo("-", x, termIdx);
  :}
  | term:t
  {:
    expressionIdx = termIdx;
  :};


/*-----------------------------------------
   TERM
-----------------------------------------*/
term ::= term:tt {: auxTermStack.push(termIdx); :} MULT factor:ff
  {:
    System.out.println("Multiplicación detectada: tt=" + tt + " ff=" + ff);
    int x = auxTermStack.pop();
    termIdx = GestorNodos.crearNodo("*", x, factorIdx);
  :}
  | term:tt {: auxTermStack.push(termIdx); :} DIV factor:ff
  {:
    System.out.println("División detectada: tt=" + tt + " ff=" + ff);
    int x = auxTermStack.pop();
    termIdx = GestorNodos.crearNodo("/", x, factorIdx);
  :}
  | factor:f
  {:
    termIdx = factorIdx;
  :};

/*-----------------------------------------
   FACTOR
-----------------------------------------*/
factor ::= IDENTIFIER:id
  {:
    System.out.println("Id: " + id);
    factorIdx = GestorNodos.crearNodo(id);
  :}
  | INTEGER_CONSTANT:constant
  {:
    System.out.println("Integer constant: " + constant);
    factorIdx = GestorNodos.crearNodo(constant.toString());
  :}
  | FLOAT_CONSTANT:constant
  {:
    System.out.println("Float constant: " + constant);
    factorIdx = GestorNodos.crearNodo(constant.toString());
  :}
  | OPEN_BRACKET expression:e CLOSE_BRACKET
  {:
    factorIdx = expressionIdx;
  :};

//reorder([x+3, 1+1, 9-x],1,2)
reorder ::= REORDER OPEN_BRACKET OPEN_SQUARE_BRACKET c_list CLOSE_SQUARE_BRACKET COMMA BOOLEAN_CONSTANT COMMA INTEGER_CONSTANT CLOSE_BRACKET {:System.out.println("REORDER function");:};
c_list ::= c_list COMMA list
  {:
            auxcondIdx = GestorNodos.crearNodo("<",GestorNodos.crearNodo("@aux"),GestorNodos.crearNodo("0"));
            auxncIdx = GestorNodos.crearNodo("+",GestorNodos.crearNodo("@c"),GestorNodos.crearNodo("1"));
            auxncIdx = GestorNodos.crearNodo("=",GestorNodos.crearNodo("@c"),auxncIdx);
            auxnc2Idx = GestorNodos.crearNodo("*",GestorNodos.crearNodo("@mult"),GestorNodos.crearNodo("@aux"));
            auxnc2Idx = GestorNodos.crearNodo("=",GestorNodos.crearNodo("@mult"),auxnc2Idx);
            auxnc3Idx = GestorNodos.crearNodo("+",GestorNodos.crearNodo("@sum"),GestorNodos.crearNodo("@aux"));
            auxnc3Idx = GestorNodos.crearNodo("=",GestorNodos.crearNodo("@sum"),auxnc3Idx);

            auxnc2Idx = GestorNodos.crearNodo(";",auxnc2Idx,auxnc3Idx);
            auxncIdx = GestorNodos.crearNodo(";",auxncIdx,auxnc2Idx);
            ifIdx = GestorNodos.crearNodo("if",auxcondIdx,auxncIdx);

            c_listIdx = GestorNodos.crearNodo(";",c_listIdx,ifIdx);

  :};
c_list ::= list
  {:

        c_listIdx = GestorNodos.crearNodo("=",GestorNodos.crearNodo("@auxnc"),listIdx);
        auxncIdx = GestorNodos.crearNodo("=",GestorNodos.crearNodo("@c"),GestorNodos.crearNodo("0"));
        c_listIdx = GestorNodos.crearNodo(";",c_listIdx,auxncIdx);
        auxncIdx = GestorNodos.crearNodo("=",GestorNodos.crearNodo("@mult"),GestorNodos.crearNodo("1"));
        c_listIdx = GestorNodos.crearNodo(";",c_listIdx,auxncIdx);
        auxncIdx = GestorNodos.crearNodo("=",GestorNodos.crearNodo("@sum"),GestorNodos.crearNodo("0"));
        c_listIdx = GestorNodos.crearNodo(";",c_listIdx,auxncIdx);

        auxcondIdx = GestorNodos.crearNodo("<",GestorNodos.crearNodo("@aux"),GestorNodos.crearNodo("0"));
        auxncIdx = GestorNodos.crearNodo("+",GestorNodos.crearNodo("@c"),GestorNodos.crearNodo("1"));
        auxncIdx = GestorNodos.crearNodo("=",GestorNodos.crearNodo("@c"),auxncIdx);
        auxnc2Idx = GestorNodos.crearNodo("*",GestorNodos.crearNodo("@mult"),GestorNodos.crearNodo("@aux"));
        auxnc2Idx = GestorNodos.crearNodo("=",GestorNodos.crearNodo("@mult"),auxnc2Idx);
        auxnc3Idx = GestorNodos.crearNodo("+",GestorNodos.crearNodo("@sum"),GestorNodos.crearNodo("@aux"));
        auxnc3Idx = GestorNodos.crearNodo("=",GestorNodos.crearNodo("@sum"),auxnc3Idx);

        auxnc2Idx = GestorNodos.crearNodo(";",auxnc2Idx,auxnc3Idx);
        auxncIdx = GestorNodos.crearNodo(";",auxncIdx,auxnc2Idx);
        ifIdx = GestorNodos.crearNodo("if",auxcondIdx,auxncIdx);

        c_listIdx = GestorNodos.crearNodo(";",c_listIdx,ifIdx);


  :};
//list ::= expression:e  {: System.out.println("Expresion: " + e); :};
//list ::= INTEGER_CONSTANT:constant {: System.out.println("Integer constant: " + constant ); :};
list ::= IDENTIFIER:id
  {: System.out.println("Id: " + id);
    listIdx = GestorNodos.crearNodo(id);

  :};

list ::= FLOAT_CONSTANT:constant
  {:
    System.out.println("Float constant: " + constant);
    listIdx = GestorNodos.crearNodo((String) constant);

  :};

//y = sliceAndConcat(3, 6, "amarillo", "verde", 0)
slice_and_concat ::= IDENTIFIER ASSIG SLICE_AND_CONCAT OPEN_BRACKET INTEGER_CONSTANT COMMA INTEGER_CONSTANT COMMA STRING_CONSTANT COMMA STRING_CONSTANT COMMA BOOLEAN_CONSTANT CLOSE_BRACKET {:System.out.println("SLICE AND CONCAT function");:};



//term ::= term MULT factor {: System.out.println("*"); :};
//term ::= term DIV factor {: System.out.println("/"); :};
//term ::= factor {: System.out.println("Term = factor"); :};
//factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
//factor ::= INTEGER_CONSTANT:constant {: System.out.println("Integer constant: " + constant ); :};
//factor ::= FLOAT_CONSTANT:constant {: System.out.println("Float constant: " + constant ); :};
//factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};

s_write ::= WRITE OPEN_BRACKET write_param CLOSE_BRACKET {: System.out.println("Write statement"); :};
write_param ::= STRING_CONSTANT | IDENTIFIER {: System.out.println("Write parameter"); :};

s_read ::= READ OPEN_BRACKET read_param CLOSE_BRACKET {: System.out.println("Read statement"); :};
read_param ::= IDENTIFIER:id
 {:
    System.out.println("Read parameter: " + id);
  :};

